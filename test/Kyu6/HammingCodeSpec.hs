module Kyu6.HammingCodeSpec (spec) where

import Control.Monad
import Kyu6.HammingCode (decode, encode)
import Test.Hspec

fixedEncode :: [([Char], [Char])]
fixedEncode =
  [ ( "hey",
      "000111111000111000000000000111111000000111000111000111111111"
        <> "111000000111"
    ),
    ( "The Sensei told me that i can do this kata",
      concat
        [ "000111000111000111000000000111111000111000000000000111111000",
          "000111000111000000111000000000000000000111000111000000111111",
          "000111111000000111000111000111111000111111111000000111111111",
          "000000111111000111111000000111000111000111111000111000000111",
          "000000111000000000000000000111111111000111000000000111111000",
          "111111111111000111111000111111000000000111111000000111000000",
          "000000111000000000000000000111111000111111000111000111111000",
          "000111000111000000111000000000000000000111111111000111000000",
          "000111111000111000000000000111111000000000000111000111111111",
          "000111000000000000111000000000000000000111111000111000000111",
          "000000111000000000000000000111111000000000111111000111111000",
          "000000000111000111111000111111111000000000111000000000000000",
          "000111111000000111000000000111111000111111111111000000111000",
          "000000000000000111111111000111000000000111111000111000000000",
          "000111111000111000000111000111111111000000111111000000111000",
          "000000000000000111111000111000111111000111111000000000000111",
          "000111111111000111000000000111111000000000000111"
        ]
    ),
    ( "T3st",
      "000111000111000111000000000000111111000000111111000111111111"
        <> "000000111111000111111111000111000000"
    ),
    ( "T?st!%",
      concat
        [ "000111000111000111000000000000111111111111111111000111111111",
          "000000111111000111111111000111000000000000111000000000000111",
          "000000111000000111000111"
        ]
    )
  ]

fixedDecode :: [([Char], [Char])]
fixedDecode =
  [ ( "100111111000111001000010000111111000000111001111000111110110"
        <> "111000010111",
      "hey"
    ),
    ( concat
        [ "000111000111000111000100000111111000111000001000000111111000",
          "010111000111000100111000000000000100000111000111000000111111",
          "000111111000000111000111000111111000111111111000000111111111",
          "000000111111000110111000000111000111000111111000111000000111",
          "000000111000000000000000000111111111000111000000000111111000",
          "111111111111000111111000111111000000000111111000000111000001",
          "000000111000000000001000000111111000111111000111000111111000",
          "000111000111000000111000000000000000000111111111000111000000",
          "000111111000111000000000000111111000000010000111000111111111",
          "000111000000000100111000000000000000000111111000111000000111",
          "000000111000000000000000000111111000000000111111000111111000",
          "000000000111000111111000111111111000000000111000000000000010",
          "000111111000000111000000000111111000111111110111000000111000",
          "000000000000000111111111000111000000000111111000111000000000",
          "000111111000111000000111000111111111000000111111000000111000",
          "000000000000000111111000111000111111000111111000000000000111",
          "000111111111000111000000000111111000000000000111"
        ],
      "The Sensei told me that i can do this kata"
    ),
    ( "000111000111000111000010000000111111000000111111000111111111"
        <> "000000111111000111111111000111010000",
      "T3st"
    ),
    ( concat
        [ "000111000111000111000001000000111111110111111111000111111111",
          "000000111111000111111111000111000000000000111000000000000111",
          "000000111000000111000111"
        ],
      "T?st!%"
    )
  ]

spec :: Spec
spec = do
  describe "fixed encode tests" $ do
    forM_ fixedEncode $ \(input, expected) -> do
      it ("encode " <> show input) $ do
        encode input `shouldBe` expected
  describe "fixed decode tests" $ do
    forM_ fixedDecode $ \(input, expected) -> do
      it ("decode " <> show input) $ do
        decode input `shouldBe` expected
